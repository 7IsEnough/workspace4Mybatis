<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace: 名称空间; 写dao接口的全类名，相当于告诉MyBatis这个配置文件是实现哪个接口的-->
<mapper namespace="com.clearlove.dao.EmployeeDao">


  <!--这个文件中能写的所有标签
    cache:和缓存有关
    cache-ref:和缓存有关
    parameterMap: 参数map;废弃的..原本是来做复杂参数映射
    resultMap：结果映射；自定义结果集的封装原则
    sql:抽取可重用的sql


    delete、update、insert、select:增删改查
    databaseId:指定这个CRUD属于哪个数据库
  -->

  <!--public Employee getEmpById(Integer id); 参数类型不用写-->
  <!-- select:用来定义一个查询操作
   id: 方法名 相当于这个配置是对于某个方法的实现
   resultType：指定方法运行后的返回值类型; (查询操作必须指定的)
   #{属性名}: 代表取出传递过来的某个参数的值
    -->
  <!--默认这个查询是不区分环境-->
  <!--传参到底能传哪些-->
  <select id="getEmpById" resultType="com.clearlove.bean.Employee">
    <!--sql语句不要写分号-->
    select * from t_employee where id=#{id}
  </select>

<!--  &lt;!&ndash;如果能精确就用精确匹配，不能就用模糊的  &ndash;&gt;-->
<!--  <select id="getEmpById" resultType="com.clearlove.bean.Employee" databaseId="mysql">-->
<!--    &lt;!&ndash;sql语句不要写分号&ndash;&gt;-->
<!--    select * from t_employee where id=#{id}-->
<!--  </select>-->

<!--  <select id="getEmpById" resultType="com.clearlove.bean.Employee" databaseId="oracle">-->
<!--    &lt;!&ndash;sql语句不要写分号&ndash;&gt;-->
<!--    select * from t_employee where id=#{id}-->
<!--  </select>-->


  <!--public Employee getEmpByIdAndEmpName(Integer id, String empName);-->
  <!--Caused by: org.apache.ibatis.binding.BindingException:
  Parameter 'id' not found. Available parameters are [0, 1, param1, param2]-->
  <select id="getEmpByIdAndEmpName" resultType="com.clearlove.bean.Employee">
    select * from t_employee where id=#{id} and empname=#{empName}
  </select>

  <!--public Employee getEmployeeByIdAndEmpName(Map<String, Object> map);-->
  <select id="getEmployeeByIdAndEmpName" resultType="com.clearlove.bean.Employee">
    select * from ${tableName} where id=#{id} and empname=#{empName}
  </select>

  <!--现象：
    1. 单个参数
        基本类型：
            取值：#{随便写}
        传入pojo：
    2. 多个参数
        取值：#{参数名}是无效的
        可用：0,1(参数的索引) 或者param1,param2(第n个参数paramN)
        原因：只要传入了多个参数，mybatis会自动的将这些参数封装在一个map中；
              封装时使用的key就是参数的索引和参数的第几个标识
              Map<String, Object> map = new HashMap();
              map.put("1",传入的值);
              map.put("2",传入的值);
         #{key}就是从这个map中取值；

    3. @Param：为参数指定key；命名参数；以后也推荐这么做
       可以告诉mybatis，封装参数map的时候别乱来，使用我们指定的key

    4. 传入了pojo(javaBean)
       取值：#{pojo的属性名}

    5. 传入了map：将多个要使用的参数封装起来
       取值：#{key}

    扩展：多个参数：自动封装map
    method01(@Param("id")Integer id, String empName, Employee employee);
    Integer id -> #{id}
    String empName -> #{param2}
    Employee employee(取出这个里面的email) -> #{param3.email}

    无论传入怎样的参数都要能正确的取出值
    #{key/属性名}
    1)#{key}取值的时候可以设置一些规则；
        id=#{id, jdbcType=INTEGER}
        javaType、jdbcType、mode、numericScale、resultMap、typeHandle、jdbcTypeName、expression
        只有jdbcType才可能是需要被指定的
            默认不指定jdbcType；mysql没问题；oracle没问题；
            万一传入的数据是Null；
            mysql插入Null没问题；oracle不知道null到底是什么类型

     实际上在mybatis中；两种取值方式；
     #{属性名}：是参数预编译的方式，参数的位置都是用?替代，参数后来都是预编译设置进去的
               安全，不会有sql注入问题
     ${属性名}：不是参数预编译，而是直接和sql语句进行拼串 不安全
                传入'1 or 1=1 or'
                id=1 or 1=1 or and empname=
                sql语句只有参数位置是支持预编译的

     一般都是使用#{}；安全；在不支持参数预编译的位置要进行取值就使用${}

     id=${id} and empname=#{empName}
     select * from t_employee where id=1 and empname=?

     id=#{id} and empname=#{empName}
     select * from t_employee where id=? and empname=?
  -->

  <!--List<Employee> getAllEmps();-->
  <!--resultType=""，如果返回的是集合，写的是集合里面元素的类型-->
  <select id="getAllEmps" resultType="com.clearlove.bean.Employee">
    select * from t_employee
  </select>


  <!--public int updateEmployee(Employee employee);
    增删改不用写返回值类型，增删改是返回影响多少行
    mybatis自动判断，如果是数字(int, long)
    如果是boolean(影响0行自动封装false，否则true)
    #{属性名}：从传入的参数对象中取出对应属性的值
  -->
  <update id="updateEmployee" >
    update t_employee set empname=#{empName}, gender=#{gender}, email=#{email}
    where id=#{id}
  </update>

  <!--public int deleteEmployee(Integer id); -->
  <delete id="deleteEmployee">
    delete from t_employee where id=#{id}
  </delete>

  <!--public int insertEmployee(Employee employee);-->
  <!--让MyBatis自动的将自增id赋值给传入的employee对象的id属性
    useGeneratedKeys: 是否使用自动生成的主键  原生jdbc获取自增主键的方法
    keyProperty:将刚才自增的id封装给哪个属性
  -->
  <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="id">

    <selectKey order="BEFORE" keyProperty="id">

    </selectKey>
    insert into t_employee(empname,gender,email) values (#{empName},#{gender},#{email})
  </insert>


  <!--public int insertEmployee2(Employee employee);-->
  <insert id="insertEmployee2">
    <!--查询主键
    order："BEFORE" 在核心sql语句之前先运行一个查询sql查到id;将查到的id赋值给javaBean的哪个属性
    -->
    <selectKey order="BEFORE" resultType="integer" keyProperty="id">
        select max(id)+1 from t_employee
    </selectKey>
    insert into t_employee(id,empname,gender,email) values (#{id},#{empName},#{gender},#{email})
  </insert>

</mapper>