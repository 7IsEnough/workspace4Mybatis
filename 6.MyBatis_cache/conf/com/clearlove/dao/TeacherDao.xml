<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.clearlove.dao.TeacherDao">
  <!--开启Mybatis默认二级缓存  <cache></cache>-->
  <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>

  <!--和别的dao共用一块缓存-->
  <!--  <cache-ref namespace="com.clearlove.dao.EmployeeDao"/>-->

  <resultMap id="teacherMap" type="com.clearlove.bean.Teacher">
    <id property="id" column="id"></id>
    <result property="address" column="address"></result>
    <result property="birth" column="birth_date"></result>
    <result property="course" column="class_name"></result>
    <result property="name" column="teacherName"></result>

  </resultMap>

  <!--抽取可重用的sql语句-->
  <sql id="selectSql">select * from t_teacher</sql>

  <!--public Teacher getTeacherById(Integer id);-->
  <!--useCache:是否使用二级缓存,默认是true-->
  <select id="getTeacherById" resultMap="teacherMap" useCache="true">
    <include refid="selectSql"></include>
    where id=#{id}
  </select>


  <!--public List<Teacher> getTeacherByCondition(Teacher teacher);-->
  <!--if标签：判断 传入非常强大的判断条件 OGNL表达式-->
  <select id="getTeacherByCondition" resultMap="teacherMap">
    select * from t_teacher
    <!--test:编写判断条件
    id!=null:取出传入的javaBean属性中的id的值，判断其是否为空
    -->
    <!--可以帮我们去除前面的and-->
    <!--where-->

    <!--截取字符串
      prefix="": 前缀：为我们下面的sql整体添加一个前缀
      prefixOverrides="" 去除整体字符串前面多余的字符
      suffix="" 为整体添加一个后缀
      suffixOverrides="" 后面那个多了可以去掉
    -->
    <!--我们查询条件就放在where标签中，每个and写在前面，where帮我们自动去除前面多余的and-->
    <trim prefix="where" prefixOverrides="and" suffixOverrides="and">
      <if test="id!=null">
        id > #{id} and
      </if>
      <!-- 空串：''
        and: &&
        or: ||
        if标签：判断 传入非常强大的判断条件
        OGNL表达式：对象导航图
          Person
            ===lastName
            ===email
            ===Address
              ===city
              ===province
              ===Street
                ===adminName
                ===info
                ===perCount
        方法、静态方法、构造器....
        在mybatis中，传入的参数可以用来做判断;
        额外还有两个东西
        _parameter: 代表传入来的参数；
          1. 传入了单个参数，_parameter就代表这个参数
          1. 传入了多个参数，_parameter就代表多个参数集合起来的map
        _databaseId: 代表当前环境
          如果配置了databaseIdProvider：_databaseId就有值
      -->
         <!--if test="_parameter!=null"></if>-->
<!--         <if test="_databaseId=='mysql'">

         </if>
          <if test="_databaseId=='oracle'">

          </if>-->
        <!--绑定一个表达式的值到一个变量-->
<!--        <bind name="_name" value="'%'+name+'%'"/>-->
      <if test="name!=null and !name.equals('') ">
        teacherName like #{name} and
      </if>
      <if test="birth!=null">
        birth_date &lt; #{birth} and
      </if>
    </trim>
  </select>

  <!--public List<Teacher> getTeacherByIdIn(List<Integer> ids);-->
  <select id="getTeacherByIdIn" resultMap="teacherMap">
    select * from t_teacher where id in
    <!--帮我们遍历集合的：
      collection=""：指定要遍历的集合的key
      close="": 以什么结束
      index="i"：索引
        如果遍历的是一个list：
            index：指定的变量保存了当前索引
            item：就是保存当前遍历的元素的值
        如果遍历的是一个map：
            index：指定的变量保存了当前遍历元素的key
            item：就是保存当前遍历的元素的值
      item="变量名"：每次遍历出的元素起一个变量名方便引用
      open="": 以什么开始
      separator="": 每次遍历元素的分隔符
    -->
    <if test="ids.size >0">
      <foreach collection="ids" item="id_item" separator="," open="(" close=")">
        #{id_item}
      </foreach>
    </if>
  </select>

  <!--public List<Teacher> getTeacherByConditionChoose(Teacher teacher);-->
  <select id="getTeacherByConditionChoose" resultMap="teacherMap">
    select * from t_teacher
    <where>
      <choose>
        <when test="id!=null">
          id = #{id}
        </when>
        <when test="name != null and !name.equals('')">
          teacherName = #{name}
        </when>
        <when test="birth!=null">
          birth_date = #{birth}
        </when>
        <otherwise>
          1=1
        </otherwise>
      </choose>
    </where>
  </select>


  <!--public int updateTeacher(Teacher teacher);-->
  <update id="updateTeacher" flushCache="true">
    update t_teacher
    <set>
      <if test="name!=null and !name.equals('')">
        teacherName=#{name},
      </if>
      <if test="course!=null and !course.equals('')">
        class_name=#{course},
      </if>
      <if test="address!=null and !address.equals('')">
        address=#{address},
      </if>
      <if test="birth!=null and !birth.equals('')">
        birth_date=#{birth}
      </if>
    </set>
    <where>
      id=#{id}
    </where>
  </update>





</mapper>